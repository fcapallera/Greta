// <auto-generated />
using System;
using CoreBot.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreBot.Migrations
{
    [DbContext(typeof(GretaDBContext))]
    partial class GretaDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreBot.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("CoreBot.Models.Naquestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NAQuestions");
                });

            modelBuilder.Entity("CoreBot.Models.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CartId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("CoreBot.Models.OrderRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId");

                    b.Property<DateTime?>("ConfirmationDate");

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("OrderRequest");
                });

            modelBuilder.Entity("CoreBot.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BotUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Permission")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((5))");

                    b.Property<int?>("PrestashopId")
                        .HasColumnName("Prestashop_Id");

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("CoreBot.Models.Cart", b =>
                {
                    b.HasOne("CoreBot.Models.UserProfile", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCart_UserProfile");
                });

            modelBuilder.Entity("CoreBot.Models.Naquestions", b =>
                {
                    b.HasOne("CoreBot.Models.UserProfile", "User")
                        .WithMany("Naquestions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_NAQuestions_UserProfile");
                });

            modelBuilder.Entity("CoreBot.Models.OrderLine", b =>
                {
                    b.HasOne("CoreBot.Models.Cart", "Cart")
                        .WithMany("OrderLine")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_OrderLine_OrderLine");
                });

            modelBuilder.Entity("CoreBot.Models.OrderRequest", b =>
                {
                    b.HasOne("CoreBot.Models.Cart", "Cart")
                        .WithMany("OrderRequest")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_OrderRequest_Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
